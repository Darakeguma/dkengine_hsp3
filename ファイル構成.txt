シーンなどをテキストで作成
	→HSPでスクリプト組んでHTML5へ変換したものでスクリプト動作(JS上でインタプリンタ動作するHSP上で更にインタプリンタ動作)
	最初は強制で"1.txt"を読み込み

シーン構成
	シーン分岐ファイル[*.txt]		ファイル名固定
	シーン画像及び動作指定ファイル[*_*.txt]	↑で指定するので英数字なら何でも可
		＋画像　シーン画像		↑で指定するので英数字なら何でも可
	アイテム情報ファイル[Item.txt]		ファイル名固定
	サウンド情報ファイル[Sound.txt]		ファイル名固定
	シーン画像情報ファイル[Image.txt]	ファイル名固定
	クリックポイント情報ファイル[Check.txt]	ファイル名固定

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
ファイル説明。[]内はparafla!でいうところのシーン名やファイル名

アイテム情報ファイル[item,aboutitem]
	id0から順に
	画像名,取得sw,消えるsw
	[EOF]

	{SW]
	フラグの内容。エディタ用。ゲーム実行時は無視。
	[EOF]

シーン分岐ファイル[room*]
	スイッチID,飛ぶべきシーンファイル
	-1,*.txtでどれにも該当しないとき（初期状態）

シーンファイル[room*_*]
	画像ファイルNo.
	移動先（上下左右の順）
	判定ファイルNo,行動,スイッチ1,スイッチ2,移動先,サウンドID,有効化スイッチ
		行動
		use,ID,(int)	//条件判定、アイテムID+100 もしくはswID(<100),確かめる値。
		usef,ID,(int)	//条件判定＆フェードインフェードアウト処理
		sw,ID,int	//アイテム取得等変数処理、いじるスイッチ,代入する値
		escape		//無条件脱出
		useescape,ID	//アイテム使用＆脱出
		move		//特殊なことは何もしないコマンド
				//移動先,サウンドID,有効化スイッチを使いたいときに

	移動先にthisを指定でそのルームのファイルを再度呼び出し。ルーム内でアイテム使ったときに。無指定及び0も同様の動作とする。

判定ファイル(* 拡張子なし)
	当たり判定が始まる場所,続くドット数を4byte+4byteで表す
	■などはサイズを減少させることができるが、１ドット毎に1010101となるようなデータには向かない
	あたり判定なので物体は連続しているはずであるからこれで良しとする
	なお連続性チェックはx方向にのみ行っているため、縦線の多いものだとy方向チェックしたしたほうが良いかもしれない
	サイズが気になるようなら考える
		(checkデータの最後1byte or 1bit目にx=0,y=1でチェック方向を保存すればよい。
		最後としたのはこのデータのないファイルとの互換性を持たせるため。
		この場合画像サイズも保存する必要あり(ゲーム内部ではx方向での並びの為展開時にオフセット計算が必要となるため))

	メモリ内展開
	ブラウザやスマートフォンでの動作の為省メモリ化
	当たり判定を0,1で指定。１ドットごとに1"bit"。
	400x400/(8bit/byte)=20000byte≒20KB
	画面サイズ変える際は判定するbitのオフセット変わるだけなので
	offset=x+y*ginfo(12)で計算すればよい。